name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: go
          package-name: bark
          version-file: internal/version/version.go
          
      # The following steps will only run if a release was created
      - name: Checkout code
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/checkout@v4

      - name: Set up Go
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          check-latest: true

      - name: Build binaries
        if: ${{ steps.release.outputs.release_created }}
        run: |
          mkdir -p dist
          
          COMMIT=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date -u +%d/%m/%Y)
          VERSION=${{ steps.release.outputs.tag_name }}
          LDFLAGS="-X 'github.com/ionut-t/bark/internal/version.version=$VERSION' -X 'github.com/ionut-t/bark/internal/version.commit=$COMMIT' -X 'github.com/ionut-t/bark/internal/version.date=$BUILD_DATE'"
          
          # Build for macOS (Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -ldflags="$LDFLAGS" -o dist/bark-darwin-arm64

          # Build for macOS (Intel)
          GOOS=darwin GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/bark-darwin-amd64
                    
          # Build for Linux (64-bit)
          GOOS=linux GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/bark-linux-amd64
          
          # Build for Windows (64-bit)
          GOOS=windows GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/bark-windows-amd64.exe
          
          chmod +x dist/*
          
          cd dist
          sha256sum * > checksums.txt
          cd ..

      - name: Upload Release Artifacts
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.release.outputs.tag_name }} dist/*

      - name: Update Release with Installation Instructions
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.release.outputs.tag_name }}
          
          # Get the existing release body (changelog generated by Release Please)
          EXISTING_BODY=$(gh release view $VERSION --json body -q .body)
          
          # Create installation instructions
          cat << 'EOF' > instructions.md
          
          ---
          
          ## Installation
          
          ### macOS (Apple Silicon)
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/$VERSION/bark-darwin-arm64 -o bark && chmod +x bark
          ```
          
          ### macOS (Intel)
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/$VERSION/bark-darwin-amd64 -o bark && chmod +x bark
          ```
          
          ### Linux
          ```bash
          curl -L https://github.com/${{ github.repository }}/releases/download/$VERSION/bark-linux-amd64 -o bark && chmod +x bark
          ```
          
          ### For macOS and Linux
          After downloading, move the binary to your PATH:
          ```bash
          sudo mv bark /usr/local/bin/
          # or
          mkdir -p ~/bin && mv bark ~/bin/ && echo 'export PATH="$HOME/bin:$PATH"' >> ~/.zshrc
          source ~/.zshrc
          ```
          
          ### Windows
          Download `bark-windows-amd64.exe` from the assets below and add it to your PATH.
          
          ### Verify Installation
          ```bash
          bark --version
          ```
          
          ---
          
          **Checksums:** See `checksums.txt` in the assets below to verify your download.
          EOF
          
          # Replace $VERSION placeholder in the instructions
          sed -i "s/\$VERSION/$VERSION/g" instructions.md
          
          # Combine existing body with instructions
          echo "$EXISTING_BODY" > combined.md
          cat instructions.md >> combined.md
          
          # Update the release with combined content
          gh release edit $VERSION --notes-file combined.md